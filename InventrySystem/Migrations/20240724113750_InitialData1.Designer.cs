// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace InventrySystem.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240724113750_InitialData1")]
    partial class InitialData1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a2bd32c0-d75e-4966-8274-758e273da3fb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aadea458-77e8-4a1d-b158-85bb1da80d71",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPJVW/qjZZqjKrbSEDEQ3D9qvD+HCiPTlVu7PfZpJ6JUrQ8KHmAyNZuNZ5bdkIGNfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user@example.com"
                        });
                });

            modelBuilder.Entity("Entities.Identity.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cfa9978f-2afd-4786-9cf9-97b4493f4d34",
                            DateCreated = new DateTime(2015, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "6a670f0d-a08f-4bba-b1fd-9b6df6e42d70",
                            DateCreated = new DateTime(2015, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Entities.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f10323d3-da72-44e7-ae7d-0379da31b329"),
                            Name = "Apple"
                        },
                        new
                        {
                            Id = new Guid("302a431a-2f54-4768-8a34-b6414f3909df"),
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = new Guid("14c1b3fb-57d0-48f5-aa4a-130a1ab629c0"),
                            Name = "Dell"
                        },
                        new
                        {
                            Id = new Guid("89491906-e1e3-4d90-b8da-7363d1d92518"),
                            Name = "Lenovo"
                        },
                        new
                        {
                            Id = new Guid("ffb0451c-5f0b-457d-a513-e308e9b87326"),
                            Name = "HP"
                        });
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9aa0f4cd-de28-4d3c-b38b-586819845ba3"),
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = new Guid("afc1bef3-e71d-4bd8-9bb2-c838c40e9ee0"),
                            Name = "Desktops"
                        },
                        new
                        {
                            Id = new Guid("42a2b158-1964-47da-8c4e-31a249aa1b3a"),
                            Name = "Printers"
                        },
                        new
                        {
                            Id = new Guid("f8f32941-7bad-471e-9d15-07b0ed660516"),
                            Name = "Mobile Phone"
                        });
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFaulty")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2719efd-4bea-4cc2-84c3-4400e838a545"),
                            BrandId = new Guid("f10323d3-da72-44e7-ae7d-0379da31b329"),
                            CategoryId = new Guid("9aa0f4cd-de28-4d3c-b38b-586819845ba3"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Laptop X1",
                            SerialNumber = "SN123456",
                            SupplierId = new Guid("029e2d94-fd9d-41bd-9b4a-58b2f738c662")
                        },
                        new
                        {
                            Id = new Guid("24def009-1f00-484d-8da5-246e1dcd7a24"),
                            BrandId = new Guid("f10323d3-da72-44e7-ae7d-0379da31b329"),
                            CategoryId = new Guid("9aa0f4cd-de28-4d3c-b38b-586819845ba3"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Laptop X2",
                            SerialNumber = "SN789012",
                            SupplierId = new Guid("029e2d94-fd9d-41bd-9b4a-58b2f738c662")
                        },
                        new
                        {
                            Id = new Guid("4ea5279f-5d0a-4191-b341-84639f62fd45"),
                            BrandId = new Guid("f10323d3-da72-44e7-ae7d-0379da31b329"),
                            CategoryId = new Guid("9aa0f4cd-de28-4d3c-b38b-586819845ba3"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Laptop X3",
                            SerialNumber = "SN345678",
                            SupplierId = new Guid("029e2d94-fd9d-41bd-9b4a-58b2f738c662")
                        },
                        new
                        {
                            Id = new Guid("06d92bfd-6bd8-44be-8246-ab6df218da24"),
                            BrandId = new Guid("89491906-e1e3-4d90-b8da-7363d1d92518"),
                            CategoryId = new Guid("afc1bef3-e71d-4bd8-9bb2-c838c40e9ee0"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Desktop Y1",
                            SerialNumber = "SN246810",
                            SupplierId = new Guid("ec98376a-b287-458c-96b8-18aef57eb9f0")
                        },
                        new
                        {
                            Id = new Guid("c655db0d-7a7c-4d3c-85bd-87e6b89050c3"),
                            BrandId = new Guid("89491906-e1e3-4d90-b8da-7363d1d92518"),
                            CategoryId = new Guid("afc1bef3-e71d-4bd8-9bb2-c838c40e9ee0"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Desktop Y2",
                            SerialNumber = "SN567890",
                            SupplierId = new Guid("ec98376a-b287-458c-96b8-18aef57eb9f0")
                        },
                        new
                        {
                            Id = new Guid("7766401a-0891-4409-a4fa-5682b0dcad37"),
                            BrandId = new Guid("89491906-e1e3-4d90-b8da-7363d1d92518"),
                            CategoryId = new Guid("afc1bef3-e71d-4bd8-9bb2-c838c40e9ee0"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Desktop Y3",
                            SerialNumber = "SN112233",
                            SupplierId = new Guid("ec98376a-b287-458c-96b8-18aef57eb9f0")
                        },
                        new
                        {
                            Id = new Guid("c8357b30-923c-4bc4-9413-8e51a9216c28"),
                            BrandId = new Guid("ffb0451c-5f0b-457d-a513-e308e9b87326"),
                            CategoryId = new Guid("42a2b158-1964-47da-8c4e-31a249aa1b3a"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Printer Z1",
                            SerialNumber = "SN987654",
                            SupplierId = new Guid("3fff2d50-83f4-4128-a5dd-bb74f0d754e8")
                        },
                        new
                        {
                            Id = new Guid("b714a553-b91f-4acc-b791-d510fb4b327b"),
                            BrandId = new Guid("ffb0451c-5f0b-457d-a513-e308e9b87326"),
                            CategoryId = new Guid("42a2b158-1964-47da-8c4e-31a249aa1b3a"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Printer Z2",
                            SerialNumber = "SN456789",
                            SupplierId = new Guid("3fff2d50-83f4-4128-a5dd-bb74f0d754e8")
                        },
                        new
                        {
                            Id = new Guid("eba952db-addc-414b-bb9d-a8503dcdb3f3"),
                            BrandId = new Guid("ffb0451c-5f0b-457d-a513-e308e9b87326"),
                            CategoryId = new Guid("42a2b158-1964-47da-8c4e-31a249aa1b3a"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Printer Z3",
                            SerialNumber = "SN135790",
                            SupplierId = new Guid("3fff2d50-83f4-4128-a5dd-bb74f0d754e8")
                        },
                        new
                        {
                            Id = new Guid("0e4a97e9-0d0d-4ef5-a418-2ec4d50fa7fe"),
                            BrandId = new Guid("302a431a-2f54-4768-8a34-b6414f3909df"),
                            CategoryId = new Guid("f8f32941-7bad-471e-9d15-07b0ed660516"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Mobile Phone M1",
                            SerialNumber = "SN789012",
                            SupplierId = new Guid("3fff2d50-83f4-4128-a5dd-bb74f0d754e8")
                        },
                        new
                        {
                            Id = new Guid("3ad0c4ff-b918-4cea-a592-6d1d13382509"),
                            BrandId = new Guid("302a431a-2f54-4768-8a34-b6414f3909df"),
                            CategoryId = new Guid("f8f32941-7bad-471e-9d15-07b0ed660516"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Mobile Phone M2",
                            SerialNumber = "SN456789",
                            SupplierId = new Guid("3fff2d50-83f4-4128-a5dd-bb74f0d754e8")
                        },
                        new
                        {
                            Id = new Guid("cc73f4c5-2fd8-40fc-bb78-e73cb9c41121"),
                            BrandId = new Guid("f10323d3-da72-44e7-ae7d-0379da31b329"),
                            CategoryId = new Guid("f8f32941-7bad-471e-9d15-07b0ed660516"),
                            IsAvailable = true,
                            IsFaulty = false,
                            Name = "Mobile Phone M3",
                            SerialNumber = "SN135790",
                            SupplierId = new Guid("3fff2d50-83f4-4128-a5dd-bb74f0d754e8")
                        });
                });

            modelBuilder.Entity("Entities.Models.DeviceAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("DeviceAssignments");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f8ba2f9-3462-4d1e-9dbc-eacab5de0bef"),
                            Email = "john.doe@example.com",
                            EmployeeNumber = "EMP001",
                            FirstName = "John",
                            LastName = "Doe",
                            Position = "Software Engineer"
                        },
                        new
                        {
                            Id = new Guid("07d7fa03-5520-40cc-8c79-36a19801c0fe"),
                            Email = "jane.smith@example.com",
                            EmployeeNumber = "EMP002",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Position = "Project Manager"
                        },
                        new
                        {
                            Id = new Guid("41d13230-f49c-46ad-bfba-de7b87bc0551"),
                            Email = "alice.johnson@example.com",
                            EmployeeNumber = "EMP003",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Position = "HR Coordinator"
                        });
                });

            modelBuilder.Entity("Entities.Models.MaintenanceSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("MaintenanceSchedules");
                });

            modelBuilder.Entity("Entities.Models.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fe78363-8333-4168-8dd7-532dcb58de42"),
                            Location = "Building 1, Floor 2",
                            Name = "Office A"
                        },
                        new
                        {
                            Id = new Guid("516d490a-073d-4c1d-a375-78be4378128d"),
                            Location = "Building 2, Floor 1",
                            Name = "Office B"
                        },
                        new
                        {
                            Id = new Guid("36221a12-b058-49d7-9192-22f1dd012385"),
                            Location = "Building 3, Floor 3",
                            Name = "Office C"
                        });
                });

            modelBuilder.Entity("Entities.Models.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Entities.Models.ServiceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PerformedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("ServiceHistories");
                });

            modelBuilder.Entity("Entities.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fff2d50-83f4-4128-a5dd-bb74f0d754e8"),
                            ContactInfo = "Contact info for CompuParts",
                            Name = "CompuParts Eswatini"
                        },
                        new
                        {
                            Id = new Guid("ec98376a-b287-458c-96b8-18aef57eb9f0"),
                            ContactInfo = "Contact info for DataNet",
                            Name = "DataNet Eswatini"
                        },
                        new
                        {
                            Id = new Guid("029e2d94-fd9d-41bd-9b4a-58b2f738c662"),
                            ContactInfo = "Contact info for Omega IT",
                            Name = "Omega IT Eswatini"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a2bd32c0-d75e-4966-8274-758e273da3fb",
                            RoleId = "cfa9978f-2afd-4786-9cf9-97b4493f4d34"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.HasOne("Entities.Models.Brand", "Brand")
                        .WithMany("Devices")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Devices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Supplier", "Supplier")
                        .WithMany("Devices")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Entities.Models.DeviceAssignment", b =>
                {
                    b.HasOne("Entities.Models.Device", "Device")
                        .WithOne("CurrentAssignment")
                        .HasForeignKey("Entities.Models.DeviceAssignment", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Employee", "Employee")
                        .WithMany("DeviceAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entities.Models.Office", "Office")
                        .WithMany("DeviceAssignments")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Device");

                    b.Navigation("Employee");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Entities.Models.MaintenanceSchedule", b =>
                {
                    b.HasOne("Entities.Models.Device", "Device")
                        .WithMany("MaintenanceSchedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Entities.Models.ServiceHistory", b =>
                {
                    b.HasOne("Entities.Models.Device", "Device")
                        .WithMany("ServiceHistories")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Entities.Identity.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Entities.Identity.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Brand", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Entities.Models.Device", b =>
                {
                    b.Navigation("CurrentAssignment");

                    b.Navigation("MaintenanceSchedules");

                    b.Navigation("ServiceHistories");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Navigation("DeviceAssignments");
                });

            modelBuilder.Entity("Entities.Models.Office", b =>
                {
                    b.Navigation("DeviceAssignments");
                });

            modelBuilder.Entity("Entities.Models.Supplier", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
